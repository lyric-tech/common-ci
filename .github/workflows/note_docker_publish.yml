name: Note Docker Build and publish docker

on:
  workflow_call:
    inputs:
      NOTE_TAG:
        required: true
        type: string
      NOTE_REPOSITORY_NAME:
        required: true
        type: string
      NOTE_CI_TEMPLATE_VERSION:
        required: true
        type: string
      BASE_DIRECTORY:
        default: '.'
        type: string           
    secrets:
      LYRIC_GITHUB_USERNAME:
        required: true
      LYRIC_GITHUB_TOKEN:
        required: true
      CHAINBRAIN_TOKEN:
        required: true
      ORG_ID:
        required: true
      AWS_ROLE_ARN:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      ECR_REGISTRY:
        required: true
      GCR_REGISTRY:
        required: true
      GCP_WORKLOAD_IDENTITY:
        required: true
      GCP_SERVICE_ACCOUNT:
        required: true
      GCP_PROJECT_ID:
        required: true
      ACR_ENDPOINT:
        required: true
      ACR_USERNAME:
        required: true
      ACR_PASSWORD:
        required: true
        

permissions:
  id-token: write
  contents: write 
  repository-projects: write

jobs:
  docker_publish:
    name: Build and Publish Notes Docker Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set note env variables
      env:
        ORG_ID: ${{ secrets.ORG_ID }}
        NOTE_REPOSITORY_NAME: ${{ inputs.NOTE_REPOSITORY_NAME }}
      run: |
        echo "NOTE_NAME=$(echo $NOTE_REPOSITORY_NAME | sed 's/note-//')" >> $GITHUB_ENV
        echo "NOTE_IMAGE_REPO=$ORG_ID/note/$(echo $NOTE_REPOSITORY_NAME | sed 's/note-//')" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: 'Authenticate to Google Cloud'
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Login to GCR
      uses: docker/login-action@v2
      env:
        gcr_password: ${{ steps.auth.outputs.access_token}}
      with:
        registry: us-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ env.gcr_password }}

    - name: Log into ACR
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.ACR_ENDPOINT }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Docker meta for ECR
      id: meta
      uses: docker/metadata-action@v3    
      with:
        images: |
          ${{ secrets.ECR_REGISTRY }}/${{ env.NOTE_IMAGE_REPO }}
          ${{ secrets.GCR_REGISTRY }}/${{ env.NOTE_IMAGE_REPO }}
          ${{ secrets.ACR_ENDPOINT }}/${{ env.NOTE_IMAGE_REPO }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY:  ${{ steps.login-ecr.outputs.registry }}
        CHAINBRAIN_TOKEN: ${{ secrets.CHAINBRAIN_TOKEN }}
        NOTE_CI_TEMPLATE_VERSION: ${{ inputs.NOTE_CI_TEMPLATE_VERSION }}
        LYRIC_GITHUB_USERNAME: ${{ secrets.LYRIC_GITHUB_USERNAME }}
        LYRIC_GITHUB_TOKEN: ${{ secrets.LYRIC_GITHUB_TOKEN }}
      run: |
        echo "note_name & repo: $NOTE_NAME , $NOTE_IMAGE_REPO"
        curl https://raw.githubusercontent.com/lyric-tech/common-ci/${NOTE_CI_TEMPLATE_VERSION}/note/Dockerfile.spark.base > Dockerfile.base
        curl https://raw.githubusercontent.com/lyric-tech/common-ci/${NOTE_CI_TEMPLATE_VERSION}/note/Dockerfile.spark.base > Dockerfile.spark.base
        curl https://raw.githubusercontent.com/lyric-tech/common-ci/${NOTE_CI_TEMPLATE_VERSION}/note/Dockerfile.pandas2.base > Dockerfile.pandas2.base
        curl https://raw.githubusercontent.com/lyric-tech/common-ci/${NOTE_CI_TEMPLATE_VERSION}/note/Dockerfile.pandas1.base > Dockerfile.pandas1.base
        curl https://raw.githubusercontent.com/lyric-tech/common-ci/${NOTE_CI_TEMPLATE_VERSION}/note/Dockerfile.polars.base > Dockerfile.polars.base
        aws ecr describe-repositories --repository-names $NOTE_IMAGE_REPO || aws ecr create-repository \
          --repository-name $NOTE_IMAGE_REPO --image-scanning-configuration scanOnPush=true \
          --encryption-configuration '{"encryptionType":"KMS"}' \
          --tags Key=sprinto,Value=prod Key=env,Value=prod 

    - name: Build and push
      uses: docker/build-push-action@v4
      env:
        BASE_DIRECTORY: ${{ inputs.BASE_DIRECTORY }}
        CHAINBRAIN_TOKEN: ${{ secrets.CHAINBRAIN_TOKEN }}
        LYRIC_GITHUB_USERNAME: ${{ secrets.LYRIC_GITHUB_USERNAME }}
        LYRIC_GITHUB_TOKEN: ${{ secrets.LYRIC_GITHUB_TOKEN }}
      with:
        context: ${{ inputs.BASE_DIRECTORY }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
            private_repo_username=chainbrain-token
            private_repo_token=${{ secrets.CHAINBRAIN_TOKEN }}
            github_username=${{ secrets.LYRIC_GITHUB_USERNAME }}
            github_token=${{ secrets.LYRIC_GITHUB_TOKEN }}
            docker_registry=${{ secrets.ECR_REGISTRY }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
        cache-from: type=gha
        cache-to: type=gha,mode=max