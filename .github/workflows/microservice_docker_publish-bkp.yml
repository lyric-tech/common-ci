name: Microservice Docker Build and publish

on:
  workflow_call:
    inputs:
      IMAGE_TAG:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      BASE_DIRECTORY:
        default: '.'
        type: string
    secrets:
      AWS_DEFAULT_REGION:
        required: true
      AWS_ROLE_ARN:
        required: true
      GCP_WORKLOAD_IDENTITY:
        required: true
      GCP_SERVICE_ACCOUNT:
        required: true
      GCP_PROJECT_ID:
        required: true
             
permissions:
  id-token: write
  contents: write 
  repository-projects: write

env:
  TARGET_PLATFORMS: linux/arm64,linux/amd64,linux/amd64/v2,linux/arm/v7,linux/arm/v6
  IMAGE_NAME: ${{ inputs.ECR_REPOSITORY }}

jobs:
  build_and_publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        platforms: ${{ env.TARGET_PLATFORMS }}

    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_TAG: "${{ inputs.IMAGE_TAG }}"
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        BASE_DIRECTORY: ${{ inputs.BASE_DIRECTORY }}
        CHAINBRAIN_TOKEN: ${{ secrets.CHAINBRAIN_TOKEN }}
        LYRIC_GITHUB_USERNAME: ${{ secrets.LYRIC_GITHUB_USERNAME }}
        LYRIC_GITHUB_TOKEN: ${{ secrets.LYRIC_GITHUB_TOKEN }}
      run: |
          # Build a docker container and push it to ECR 
          sudo apt-get install qemu binfmt-support qemu-user-static -y
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker run --privileged --rm tonistiigi/binfmt --install all
          cd $BASE_DIRECTORY
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository \
            --repository-name $ECR_REPOSITORY --image-scanning-configuration scanOnPush=true \
            --encryption-configuration '{"encryptionType":"KMS"}' \
            --tags Key=sprinto,Value=prod Key=env,Value=prod
          docker buildx create --name lyric --platform linux/arm64/v8,linux/arm64,linux/arm64/v7,linux/amd64 --use
         
          DOCKER_BUILDKIT=1 docker buildx build --provenance false \
            --build-arg private_repo_username=chainbrain-token \
            --build-arg private_repo_token=${CHAINBRAIN_TOKEN} \
            --build-arg github_username=${LYRIC_GITHUB_USERNAME} \
            --build-arg github_token=${LYRIC_GITHUB_TOKEN} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --push \
            --platform linux/arm64/v8,linux/arm64,linux/arm64/v7,linux/amd64 .
  
          echo "Pushing Image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::group::Image Tag"
          echo "$IMAGE_TAG"
          echo "::endgroup::"
        
    - name: 'Authenticate to Google Cloud'
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Login to GCR
      uses: docker/login-action@v2
      with:
        registry: gcr.io
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Tag, and push image to Google GCR
      env:
        IMAGE_TAG: "${{ inputs.IMAGE_TAG }}"
        ECR_REGISTRY:  ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        GCP_PROJECT_ID:  ${{ secrets.GCP_PROJECT_ID }}
      run: |
        # Build a docker container and push it to ECR 
        sudo apt-get install qemu binfmt-support qemu-user-static -y
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        cd $BASE_DIRECTORY
        docker buildx create --name lyric-gcr --platform linux/arm64/v8,linux/arm64,linux/arm64/v7,linux/amd64 --use
      
        DOCKER_BUILDKIT=1 docker buildx build \
          --build-arg private_repo_username=chainbrain-token \
          --build-arg private_repo_token=${CHAINBRAIN_TOKEN} \
          --build-arg github_username=${LYRIC_GITHUB_USERNAME} \
          --build-arg github_token=${LYRIC_GITHUB_TOKEN} \
          -t gcr.io/$GCP_PROJECT_ID/$ECR_REPOSITORY:$IMAGE_TAG --push \
          --platform linux/arm64/v8,linux/arm64,linux/arm64/v7,linux/amd64 .

        echo "::group::Image Tag"
        echo "${{ inputs.IMAGE_TAG }}"
        echo "::endgroup::"