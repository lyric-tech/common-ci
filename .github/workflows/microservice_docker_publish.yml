name: Build and Publish Docker Image

on:
  workflow_call:
    inputs:
      IMAGE_TAG:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
    secrets:
      AWS_DEFAULT_REGION:
        required: true
      AWS_ROLE_ARN:
        required: true
     
permissions:
  id-token: write
  contents: read 
  
jobs:
  docker_publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_TAG: "${{ inputs.IMAGE_TAG }}"
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
      run: |
        # Build a docker container and push it to ECR 
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository \
          --repository-name $ECR_REPOSITORY --image-scanning-configuration scanOnPush=true \
          --encryption-configuration '{"encryptionType":"KMS"}' \
          --tags Key=sprinto,Value=prod Key=env,Value=prod

        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG || true
        #DOCKER_BUILDKIT=1 docker build --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        DOCKER_BUILDKIT=1 docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

        echo "Pushing Image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::group::Image Tag"
        echo "$IMAGE_TAG"
        echo "::endgroup::"