name: Microservice Docker Build and Publish to ECR, GCR, and ACR

on:
  workflow_call:
    inputs:
      REPOSITORY_NAME:
        required: true
        type: string
        description: 'Name of the repository to build and publish'
      CHAINBRAIN_VERSION:
        default: 'latest'
        type: string
        description: 'Chainbrain version to use'    
      BASE_DIRECTORY:
        default: '.'
        type: string
        description: 'Base directory for Docker build'
    secrets:
      LYRIC_GITHUB_USERNAME:
        required: false
        description: 'Github username for private repo access'
      LYRIC_GITHUB_TOKEN:
        required: false
        description: 'Github token for private repo access'
      GITLAB_USERNAME:
        required: false
        description: 'Gitlab username for private repo access'
      GITLAB_TOKEN:
        required: false
        description: 'Gitlab token for private repo access'
      AWS_DEFAULT_REGION:
        required: true
        description: 'AWS region for ECR'
      AWS_ROLE_ARN:
        required: true
        description: 'AWS role ARN for ECR'
      ECR_REGISTRY:
        required: true
        description: 'ECR registry for ECR'
      GCR_REGISTRY:
        required: true
        description: 'GCR registry for GCR'
      GCP_WORKLOAD_IDENTITY:
        required: true
        description: 'GCP workload identity for GCR'
      GCP_SERVICE_ACCOUNT:
        required: true
        description: 'GCP service account for GCR'
      GCP_PROJECT_ID:
        required: true
        description: 'GCP project ID for GCR'
      ACR_ENDPOINT:
        required: true
        description: 'ACR endpoint for ACR'
      ACR_USERNAME:
        required: true
        description: 'ACR username for ACR'
      ACR_PASSWORD:
        required: true
        description: 'ACR password for ACR'
             
permissions:
  id-token: write
  contents: write 
  repository-projects: write
  
jobs:
  # Build and publish
  build_and_publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
    # Checkout the repository
    - name: Check out code
      uses: actions/checkout@v4

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    # Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
  
    # Create ECR repository
    - uses: int128/create-ecr-repository-action@v1
      with:
        repository: ${{ inputs.REPOSITORY_NAME }}
        lifecycle-policy: .github/config/lifecycle-policy.json
          
    # Login to Google Cloud
    - name: 'Authenticate to Google Cloud'
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    # Login to Google Cloud Registry
    - name: Login to GCR
      uses: docker/login-action@v2
      env:
        gcr_password: ${{ steps.auth.outputs.access_token}}
      with:
        registry: us-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ env.gcr_password }}

    # Login to Azure Container Registry
    - name: Log into ACR
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.ACR_ENDPOINT }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # Get Docker meta
    - name: Docker meta for ECR
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.ECR_REGISTRY }}/${{ inputs.REPOSITORY_NAME }}
          ${{ secrets.GCR_REGISTRY }}/${{ inputs.REPOSITORY_NAME }}
          ${{ secrets.ACR_ENDPOINT }}/${{ inputs.REPOSITORY_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

    # Set up QEMU
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
   
    # Build and push
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.BASE_DIRECTORY }}
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          private_repo_username=${{ secrets.GITLAB_USERNAME }}
          private_repo_token=${{ secrets.GITLAB_TOKEN }}
          gitlab_username=${{ secrets.GITLAB_USERNAME }}
          gitlab_token=${{ secrets.GITLAB_TOKEN }}
          github_username=${{ secrets.LYRIC_GITHUB_USERNAME }}
          github_token=${{ secrets.LYRIC_GITHUB_TOKEN }}
          docker_registry=${{ secrets.ECR_REGISTRY }}
          chainbrain_version=${{ secrets.CHAINBRAIN_VERSION }}
