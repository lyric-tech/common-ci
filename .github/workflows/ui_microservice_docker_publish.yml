name: UI Microservice Docker Build and publish

on:
  workflow_call:
    inputs:
      IMAGE_TAG:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
    secrets:
      AWS_DEFAULT_REGION:
        required: true
      AWS_ROLE_ARN:
        required: true
     
permissions:
  id-token: write
  contents: write 
  repository-projects: write
  
jobs:
  build_and_publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_TAG: "${{ inputs.IMAGE_TAG }}"
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
      run: |
        # Build a docker container and push it to ECR 
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository \
          --repository-name $ECR_REPOSITORY --image-scanning-configuration scanOnPush=true \
          --encryption-configuration '{"encryptionType":"KMS"}' \
          --tags Key=sprinto,Value=prod Key=env,Value=prod

        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:deps || true
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:builder || true
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG || true
        docker build --build-arg DOCKER_REGISTRY=$ECR_REGISTRY --build-arg CI_PIPELINE_PROJECT=$ECR_REPOSITORY --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:deps -t $ECR_REGISTRY/$ECR_REPOSITORY:deps -f Dockerfile.deps .
        docker build --build-arg DOCKER_REGISTRY=$ECR_REGISTRY --build-arg CI_PIPELINE_PROJECT=$ECR_REPOSITORY --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:deps --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:builder -t $ECR_REGISTRY/$ECR_REPOSITORY:builder -f Dockerfile.builder .
        docker build --build-arg DOCKER_REGISTRY=$ECR_REGISTRY --build-arg CI_PIPELINE_PROJECT=$ECR_REPOSITORY --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:deps --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:builder --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.runner .
        
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:deps
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:builder

        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::group::Image Tag"
        echo "$IMAGE_TAG"
        echo "::endgroup::"
        
    - name: 'Authenticate to Google Cloud'
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Login to GCR
      uses: docker/login-action@v2
      with:
        registry: gcr.io
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Tag, and push image to Google GCR
      env:
        IMAGE_TAG: "${{ inputs.IMAGE_TAG }}"
        ECR_REGISTRY:  ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
        GCP_PROJECT_ID:  ${{ secrets.GCP_PROJECT_ID }}
      run: |
        echo "Pushing Image to GCR..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG gcr.io/$GCP_PROJECT_ID/$ECR_REPOSITORY:$IMAGE_TAG
        docker push gcr.io/$GCP_PROJECT_ID/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::group::Image Tag"
        echo "${{ inputs.IMAGE_TAG }}"
        echo "::endgroup::"
