name: Note Docker Build and publish docker

on:
  workflow_call:
    inputs:
      NOTE_TAG:
        required: true
        type: string
      NOTE_REPOSITORY_NAME:
        required: true
        type: string
      NOTE_CI_TEMPLATE_VERSION:
        required: true
        type: string
    secrets:
      LYRIC_GITHUB_USERNAME:
        required: true
      LYRIC_GITHUB_TOKEN:
        required: true
      CHAINBRAIN_TOKEN:
        required: true
      ORG_ID:
        required: true
      AWS_ROLE_ARN:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      GCP_WORKLOAD_IDENTITY:
        required: true
      GCP_SERVICE_ACCOUNT:
        required: true
      GCP_PROJECT_ID:
        required: true
        

permissions:
  id-token: write
  contents: write 
  repository-projects: write

env:
  TARGET_PLATFORMS: linux/amd64,linux/arm64

jobs:
  docker_publish:
    name: Build and Publish Notes Docker Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        role-duration-seconds: 900

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set note env variables
      env:
        ORG_ID: ${{ secrets.ORG_ID }}
        NOTE_REPOSITORY_NAME: ${{ inputs.NOTE_REPOSITORY_NAME }}
      run: |
        echo "NOTE_NAME=$(echo $NOTE_REPOSITORY_NAME | sed 's/note-//')" >> $GITHUB_ENV
        echo "NOTE_IMAGE_REPO=$ORG_ID/note/$(echo $NOTE_REPOSITORY_NAME | sed 's/note-//')" >> $GITHUB_ENV

    - name: Create Amazon ECR repository
      env:
        NOTE_CI_TEMPLATE_VERSION: ${{ inputs.NOTE_CI_TEMPLATE_VERSION }}
      run: |
          curl https://raw.githubusercontent.com/lyric-tech/common-ci/${NOTE_CI_TEMPLATE_VERSION}/note/Dockerfile.spark.base > Dockerfile.base
          curl https://raw.githubusercontent.com/lyric-tech/common-ci/${NOTE_CI_TEMPLATE_VERSION}/note/Dockerfile.spark.base > Dockerfile.spark.base
          curl https://raw.githubusercontent.com/lyric-tech/common-ci/${NOTE_CI_TEMPLATE_VERSION}/note/Dockerfile.pandas2.base > Dockerfile.pandas2.base
          curl https://raw.githubusercontent.com/lyric-tech/common-ci/${NOTE_CI_TEMPLATE_VERSION}/note/Dockerfile.pandas1.base > Dockerfile.pandas1.base
          curl https://raw.githubusercontent.com/lyric-tech/common-ci/${NOTE_CI_TEMPLATE_VERSION}/note/Dockerfile.polars.base > Dockerfile.polars.base
          aws ecr describe-repositories --repository-names $NOTE_IMAGE_REPO || aws ecr create-repository \
          --repository-name $NOTE_IMAGE_REPO --image-scanning-configuration scanOnPush=true \
          --encryption-configuration '{"encryptionType":"KMS"}' \
          --tags Key=sprinto,Value=prod Key=env,Value=prod

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
  
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY:  ${{ steps.login-ecr.outputs.registry }}
        CHAINBRAIN_TOKEN: ${{ secrets.CHAINBRAIN_TOKEN }}
        NOTE_CI_TEMPLATE_VERSION: ${{ inputs.NOTE_CI_TEMPLATE_VERSION }}
        LYRIC_GITHUB_USERNAME: ${{ secrets.LYRIC_GITHUB_USERNAME }}
        LYRIC_GITHUB_TOKEN: ${{ secrets.LYRIC_GITHUB_TOKEN }}
      run: |
        docker pul $ECR_REGISTRY/$NOTE_IMAGE_REPO:${{ inputs.NOTE_TAG }}  || true
        docker buildx create --use
        docker buildx build --platform linux/amd64,linux/arm64 \
          --cache-from $ECR_REGISTRY/$NOTE_IMAGE_REPO:${{ inputs.NOTE_TAG }} \
          --build-arg private_repo_username=chainbrain-token \
          --build-arg private_repo_token=${CHAINBRAIN_TOKEN} \
          --build-arg github_username=${LYRIC_GITHUB_USERNAME} \
          --build-arg github_token=${LYRIC_GITHUB_TOKEN} \
          --build-arg docker_registry=${ECR_REGISTRY} \
          -t $ECR_REGISTRY/$NOTE_IMAGE_REPO:${{ inputs.NOTE_TAG }} .
        docker push $ECR_REGISTRY/${NOTE_IMAGE_REPO}:${{ inputs.NOTE_TAG }}

    - name: 'Authenticate to Google Cloud'
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Login to GCR
      uses: docker/login-action@v2
      with:
        registry: gcr.io
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Tag, and push image to Google GCR
      env:
        ECR_REGISTRY:  ${{ steps.login-ecr.outputs.registry }}
        GCP_PROJECT_ID:  ${{ secrets.GCP_PROJECT_ID }}
      run: |
        echo "note_name & repo: $NOTE_NAME , $NOTE_IMAGE_REPO"
        echo "Pushing Image to GCR..."
        docker tag ${ECR_REGISTRY}/${NOTE_IMAGE_REPO}:${{ inputs.NOTE_TAG }} gcr.io/$GCP_PROJECT_ID/${NOTE_IMAGE_REPO}:${{ inputs.NOTE_TAG }}
        docker push gcr.io/$GCP_PROJECT_ID/${NOTE_IMAGE_REPO}:${{ inputs.NOTE_TAG }}
        echo "::group::Image Tag"
        echo "${{ inputs.NOTE_TAG }}"
        echo "::endgroup::"
#
#    - name: Log into registry
#      uses: docker/login-action@v1
#      with:
#        registry: ${{ secrets.ACR_ENDPOINT }}
#        username: ${{ secrets.ACR_USERNAME }}
#        password: ${{ secrets.ACR_PASSWORD }}
#
#    - name: Tag, and push image to Azure ACR
#      env:
#        ECR_REGISTRY:  ${{ steps.login-ecr.outputs.registry }}
#        ACR_REGISTRY:  ${{ steps.ACR_ENDPOINT }}
#      run: |
#        echo "note_name & repo: $NOTE_NAME , $NOTE_IMAGE_REPO"
#        echo "Pushing Image to GCR..."
#        docker tag ${ECR_REGISTRY}/${NOTE_IMAGE_REPO}:${{ inputs.NOTE_TAG }} ${ACR_REGISTRY}/${NOTE_IMAGE_REPO}:${{ inputs.NOTE_TAG }}
#        docker push ${ACR_REGISTRY}/${NOTE_IMAGE_REPO}:${{ inputs.NOTE_TAG }}
#        echo "::group::Image Tag"
#        echo "${{ inputs.NOTE_TAG }}"
#        echo "::endgroup::"